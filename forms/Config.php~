<?php

/**
 * @package     HistoryLog
 * @copyright   2014 UCSC Library Digital Initiatives
 * @license     
 */

class Youtube_Form_Import extends Omeka_Form
{

    /**
     * Construct the report generation form.
     */
    public function init()
    {
        parent::init();
        $this->_registerElements();
    }

    /**
     * Define the form elements.
     */
    private function _registerElements()
    {

        // Collection:
        $this->addElement('select', 'collection', array(
            'label'         => __('Collection'),
            'description'   => __('The collection whose items\' log information will be retrieved (default: all)'),
            'value'         => '0',
	    'order'         => 1,
            'required'      => true,
	    'multiOptions'       => $this->_getCollectionOptions()
							)
			  );

        // User(s):
        $this->addElement('select', 'user', array(
						       'label'         => __('User(s)'),
						       'description'   => __('All administrator users whose edits will be retrieved (default: all)'),
						       'value'         => '0',
						       'order'         => 2,
						       'required'      => true,
						       'multiOptions'       => $this->_getUserOptions()
						       )
	  );

	// Actions:
        $this->addElement('select', 'actions', array(
							  'label'         => __('Actions'),
							  'description'   => __('Logged curatorial actions to retrieve in this report (default: all)'),
							  'value'         => '0',

							  'order'         => 3,
							  'required'      => true,
							  'multiOptions'  => $this->_getActionOptions()
							  )
			  );

	// Dates:
        $this->addElement('text', 'date-start', array(
							  'label'         => __('Start Date:'),
							  'description'   => __('The earliest date from which to retrieve logs'),
							  'value'         => '',
							  'order'         => 4,
							  'size'          => 20,
							  'required'      => true
							  )
			  );
	$this->addElement('text', 'date-end', array(
						      'label'         => __('End Date:'),
						      'description'   => __('The latest date from which to retrieve logs'),
						      'value'         => '',
						      'order'         => 5,
						      'size'          => 20,
						      'required'      => true
						      )
			  );

        // Submit:
        $this->addElement('submit', 'submit-view', array(
            'label' => __('View Log')
        ));
        $this->addElement('submit', 'submit-download', array(
            'label' => __('Download Log')
        ));

	//Display Groups:
        $this->addDisplayGroup(
			       array(
				     'collection',
				     'user',
				     'actions',
				     'date-start',
				     'date-end'
				     ),
			       'fields'
			       );

        $this->addDisplayGroup(
			       array(
				     'submit-view',
				     'submit-download'
				     ), 
			       'submit_buttons'
			       );

    }

    public static function ProcessPost()
    {
      //echo ("processed");

    }

    private function _getActionOptions()
    {
      return( 
	     array(
		   0=>'All Actions',
		   'create'=>'Create Item',
		   'modify'=>'Modify Item',
		   'export'=>'Export Item',
		   'delete'=>'Delete Item'
		   )
	      );
    }

    private function _getCollectionOptions()
    {
      $collections = get_records('Collection',array(),'0');
      $options = array('0'=>'All Collections');
      foreach ($collections as $collection)
	{
	  $titles = $collection->getElementTexts('Dublin Core','Title');
	  if(isset($titles[0]))
	    $title = $titles[0];
	  $options[$collection->id]=$title;
	}

      return $options;
    }

    private function _getUserOptions()
    {
      $options = array('0'=>'All Users');

      $users = get_records('User',array('role'=>'super'),'0');
      foreach($users as $user)
	{
	  $options[$user->id]=$user->name." (super user)";
	}
      return($options);

      $users = get_records('User',array('role'=>'admin'),'0');
      foreach($users as $user)
	{
	  $options[$user->id]=$user->name." (administrator)";
	}
      return($options);

      $users = get_records('User',array('role'=>'contributor'),'0');
      foreach($users as $user)
	{
	  $options[$user->id]=$user->name." (contributor)";
	}
      return($options);
      
    }


}
